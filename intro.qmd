# A schematic overview of the Emu Speech Database Management System {#sec-intro}

## Background

The core idea behind Emu today is just the same as it was when it first launched in the mid-late 1980s at [CSTR, Edinburgh University](https://www.cstr.ed.ac.uk/){target='_blank'}. At the time, it was known as APS which stood for [Acoustic Phonetics in S](https://www.phonetik.uni-muenchen.de/~jmh/papers/aps.pdf){target='_blank'}.

The core idea behind Emu is:

- To manage speech databases, which are *collections of utterances* consisting of signal (waveform, formant, f0 etc) and annotation (label) files.
- To be able to *query* these databases: annotations can be extracted from the database. It should be straightforward to e.g. find all tokens of [i] in a database.
- These queried lists of annotations can be further queried to get the corresponding signals (e.g. find the formants of the [i] tokens extracted at the previous step).

There have been some landmark changes to Emu since the APS--Edinburgh days of the 1980s.

(@) Since the 1990s, Emu's query language has handled *hierarchically structured annotations*: see especially @cassidy2001. (The name Emu evolved out of **E**xtended **MU**lti-dimensional, and of course because the developers were in Australia at the time).

![](img/emu1990s.png){width='30%' fig-align='center'}

The query language is still in use today and the only one of its kind in existence.

![The author of the Emu query language is Steve Cassidy who can be seen here feeding an Emu ca 1996.](img/cassidy.png){width='30%' fig-align='center'}

The point of hierarchical annotations is to be able to query annotations at one tier with respect to another. For example the previous query could be extended to:

- Find all `[i]` vowels in the first syllable of trisyllabic accented words, but only if they are preceded by a function word in any L% intonational phrase.

(@) Since the mid-00s, the **A**dvanced **S**peech **S**ignal **P**rocessor (ASSP) toolkit developed by Michel Scheffers of the IPdS, University of Kiel has been integrated into Emu [@bombien2006]. ASSP since morphed into the R package `wrassp` ca. 2014.

(@) In the past decade or so, the Emu engine has been completely overhauled by Raphael Winkelmann with many excellent new features [see also @winkelmann2017], e.g.:

- Emu is launched and operates entirely within the R programming environment.
- An interactive graphical user interface for analysing and visualising data: the `Emu-webApp`
- Extension of the query language to include regular expressions.
- Far more rapid access to extracting annotations and their signal files from the database.

## The Emu-SDMS

<!-- would be nice to have some discussion of this! -->

The following image provides a schematic overview of the Emu-SDMS.

![](img/emu_overview.png)

The core components of the EMU-SDMS are:

* **Emu databases**. These are collections of sound files, annotation files, and signal files of a particular structure, with accompanying metadata.

* The **Emu WebApp**. This is a web-based application allowing you to access their Emu databases: to view speech signals, and to annotate them in a fast, straightforward manner, among other features. You will be introduced to the Emu WebApp in @sec-first_steps.

* The R library **`emuR`**, which allows you to manage the properties of a database, adding and removing annotation levels, adding and removing signals, querying the annotations and signals of a database, etc.

* The R library **`wrassp`**, which is the signal processing engine of the system, including different pitch trackers, formant tracking, intensity tracking, and several other signal processing capabilities.

Most of your work with the Emu-SDMS will be done in R -- the WebApp is not controlled using R, but you will generally access it using R. `emuR` allows you to interface with other software though, for example to convert a collection of sound files and annotations made using [Praat](https://fon.hum.uva.nl/praat){target='_blank'} to an Emu database as we will see in @sec-praat2emu, and to call the [Munich Automatic Segmentation](https://clarin.phonetik.uni-muenchen.de/BASWebServices/interface/WebMAUSBasic){target='_blank'} system as we will see in @sec-forcedalignment.

The R integration of Emu-SDMS has the major advantage of giving you immediate access to all the other tools that are available in R, such as the plotting capabilities of `ggplot()` and statistical modelling with e.g. `lmer()`. 